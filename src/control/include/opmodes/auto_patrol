/**
 * @file auto_patrol.hpp
 * @brief Patrols setpoints, breaks and tracks target if identified
 */

#pragma once

#include <memory>
#include "px4_controller.hpp"
#include "abstract_auto.hpp"
#include "sensor_msgs/msg/joy.hpp"

/**
 * States of this auto
 */
enum class States
{
  DISABLED = 0,
  PATROLLING = 1,
  ERRAND = 2
};


class AutoPatrol : public AutoController
{
public:
  explicit AutoPatrol (std::shared_ptr<PX4Controller> controller,
                     std::shared_ptr<rclcpp::Node> node)
    : AutoController (controller, node) {}

  ~AutoPatrol () override = default;

  void init () override
  {
    // Set init time
    init_time_ = node_->now (); 
  }
  
  bool loop () override
  {
    // Simple rising
    controller_->publish_position_setpoint (0.0, 0.0, 1.0, 0.0);
    
    return true;
  }
  
  void joy_callback (const sensor_msgs::msg::Joy::SharedPtr msg) override 
  { 
    // No user input during this auto
    (void) msg;
  }

private:
  rclcpp::Time init_time_;                      // init time of the auto
};
